[{"url":"/","title":"Mixeway Docs","breadcrumbs":[{"title":"Mixeway Docs","url":"/"}],"content":"\n\n# Mixeway Hub <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n# Mixeway goal\nMixeway is designed for security teams. \n\nAre You using Vulnerability Scanners within Your organization but You have problem in fitting them into\nCICD software delivery pipeline? Mixeway might me an ideal solution for You.\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n<img src=\"https://mixeway.github.io/img/arch.png\">\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n\n### Requirements:\n- Docker-compose\n\n\n### Running Mixeway:\nThere are 2 requirements for Mixeway to be successfully deployed using prepared docker-compose.\n- environments file to be properly configured:\n\n```\nTRUSTPASS=changeit\nKEYALIAS=localhost\nP12PASS=changeit\nPROFILE=prod\n```\n\nWhere TRUSTPASS is password for CACERT file (java keystore containing trusted root certificates), KEYALIAS alias for key stored within PKCS12 file and P12PASS - password for PKCS12 file containing both certificate and private key.\n- Certificates are in the proper place. There should be `pki` directory in the folder where docker-compose.yml is located. It is important that the `pki` directory will contain files:\n  - `ca.pem` which contains trusted root certificates (in pem format for nginx)\n  - `cert.crt` which contains public key in pem format\n  - `private.key` which contains private key in pem format\n  - `certificate.p12` PKCS12 file of cert.crt and private.key\n  - `trust.jks` which could be cacerts of JVM \n  \nThere is `setup` script prepared for `Unix` machines which generate certificates and prepare `environments`\n\nUsage:\n\n```\ngit clone https://github.com/Mixeway/MixewayHub\n/bin/sh startup.sh\ndocker-compose pull\ndocker-compose up\n```\nYou can either use `setup` script or prepare environment on Your own using the guide above.\n\nMixeway will be available at https://__Your_IP_goes_here\n\n<img src=\"https://mixeway.github.io/img/createscan.gif\">\n<img src=\"https://mixeway.github.io/img/vulns.gif\">"},{"url":"/vault/","title":"Vault","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Vault","url":"/vault/"}],"content":"# Mixeway Vault <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n\n### About\nMixeway use HashiCorp Vault as secure storage. Passwords are hashed using `BCrypt` but there is need to use actual\n password or apiKey in it real form in order to log into Vulnerability Scanner. We have decided to not store it in plain text but use Vault instead.\n\n### Instalation and running\nThere is many tutorials how to get Vault up and running. \n\n<a href=\"https://www.vaultproject.io/docs/\">Use official HashiCorp Vault docummentation</a>\n\n<a href=\"https://hub.docker.com/_/vault\">Use HashiCorp Vault Docker</a>\n\n### Mixeway integration\nIn order to properly create Mixeway integrate with Vault to store and use passwords for Vulnerability scanner You have to edit\n`env` file and set properly:\n\n```\nVAULT_APP_NAME=<application name>\nVAULT_SCHEME=<http | https>\nVAULT_TOKEN=<vault token get during configuration>\nVAULT_HOST=<IP or DNS for accessing Vault API>\nVAULT_PORT=<Port on which Vault API is listening>\n```"},{"url":"/requirements/","title":"Requirements","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Requirements","url":"/requirements/"}],"content":"\n# Requirements\n\nBefore starting Mixeway there are couple things to mention.\n###Software requirements:\n| Software   | Version | Info\n| ------------- | ------------- | ------------- |\n| Docker-compose  | 2.4+  | To Run Mixeway\n| Vault  | 1.3+  | Secret and password management, read more in Vault Section\n| PostgreSQL  | 9.6+  | Optional, if no postgresql details are provided, mixeway use in memory H2 database\n\n\n# Integrations:\n| Software Name  | Version |\n| ------------- | ------------- |\n| OpenStack  | Octa +  |\n| Nessus  | 6   |\n| OpenVAS  | 9   |\n| Nexpose  | 6.5+  |\n| Acunetix  | 11+   |\n| Fortify  | 18.1+   |\n| Checkmarx  | 8.6+   |\n| OWASP DependencyTrack  | 3.6+   |"},{"url":"/db/","title":"Db","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Db","url":"/db/"}],"content":"# Mixeway DB <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n##DB\nMixeway supports two types of storage. PosgreSQL or H2 database. If there is no configuration for PostgreSQL DB, H2\ndatabase will be use instead.\n\n## Migrations\nMixeway use Liquibase for DB synchronization. Each time database scheme change in any upcoming version\nit will be backward compatible.\n\n## Configuration\nIn order to use previously configured PostgreSQL DB You have to properly prepare `environments` file\n\n```\nPSQL_JDBC_URL=<JDBC URL in format of jdbc:postgresql://127.0.0.1:5432/mixer>\nPSQL_USERNAME=<PostgreSQL username with proper grant>\nPSQL_PASSWORD=<PostgreSQL password>\n```\n\nIf any of those 3 variables wont be set properly Mixeway will use H2 Database. If You want it to be persistent create\ndocker volume:\n\n```$xslt\ndocker volume --name create mixeway\n```\n\n## Note: using H2 is not recommended in production environment"},{"url":"/components/frontend/","title":"Frontend","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Frontend","url":"/components/frontend/"}],"content":"<a href=\"Mixeway/MixewayFrontend/blob/master/CHANGELOG.md\"><img src=\"https://camo.githubusercontent.com/452f81a1e660cf8f9a47db9405ce06a0f216221b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d6368616e67656c6f672d626c75652e737667\" alt=\"https://img.shields.io/badge/-changelog-blue.svg\" data-canonical-src=\"https://img.shields.io/badge/-changelog-blue.svg\" style=\"max-width:100%;\"></a>\n[![Build Status](https://travis-ci.org/Mixeway/MixewayFrontend.svg?branch=master)](https://travis-ci.org/Mixeway/MixewayFrontend)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayFrontend&metric=alert_status)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayFrontend)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayFrontend&metric=security_rating)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayFrontend)\n\n# Mixeway User Interface <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n###### Mixeway User Interface Description:\nMixeway User Interface is simple Angular 8 application based on <a href=\"https://github.com/akveo/ngx-admin\">Ngx-admin template</a>.\nHigh level description can be found at <a href=\"https://mixeway.io\">mixeway.io</a>\n\n\n###### Mixeway User Interface Tech stack:\n<img src=\"https://akveo.github.io/nebular/assets/img/akveo-logo.png\" width=\"50px\">\n<img src=\"https://mixeway.github.io/img/angular-icon.svg\" width=\"50px\">\n<img src=\"https://mixeway.github.io/img/docker.png\" width=\"50px\">\n\n###### Requirements:\n- Running and working backend API - <a href=\"https:/github.com/Mixeway/MixewayBackend\">Mixeway REST API</a>\n- NPM 6.9+\n- Optionaly: ssl certificates\n- Proxy setup\n\n###### Running in development mode:\n`ng serve \"--proxy-config=proxy.conf.json\" \"--configuration=dev\" \"--ssl\" \"--ssl-cert=/etc/pki/cert.pem\" \"--ssl-key=/etc/pki/key2.pem\"\n`"},{"url":"/hierarchy/","title":"Hierarchy","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Hierarchy","url":"/hierarchy/"}],"content":"\n\n## Object Hierarchy:\n<img src=\"https://mixeway.github.io/img/db.png\">\n\n###Project\nProject is top level object which describe subject (It can be IT System for example)\n\nProject contains information about:\n- Name\n- Description\n- externalID - to allow integration with third party vulnerability management systems\n\nElements of project:\n#### Asset\nAsset represent particular host. It can be saved via GUI, API or created automatically via IaaS API.\n\nAsset contains information about:\n- Interface (IPAddresses)\n- RoutingDomain (<a href=\"/routing-domains\">read more in routing domains section</a>)\n\n<a href=\"/network-scans\">Read more in Network scan section</a>)\n\n#### WebApp\nWeb App contains information about web application. Objects of webapp represent particular web application (or api endpoint).\nLoading webapps based on OpenApi Specification (swagger configuration file) is not yet supported\n\nWebApp contains information about:\n- URL\n- Headers (for authentication)\n- Cookies (for authentication)\n- Routing Domain (<a href=\"/routing-domains\">read more in routing domains section</a>)\n\n<a href=\"/webapp-scans\">Read more in WebApp Scan section</a>)\n\n\n#### Code Group and Code Project\nCodeGroup and CodeProject objects are related with Source Code Security Audits. If particular software is built from multiple microservices or components\nit could be logically grouped by Code Group otherwise each project which is a subject of a SAST testing should be stored as CodeGroup Object.\n\nCode Group and CodeProject objects contains information about:\n- Git Repo url\n- Git username\n- Git token (be sure that this token has proper rights as it will be used by SAST software to clone and fetch repo)\n- Git branch\n- Project name\n\nIn scenario where You have CodeGroup named `backend` and multiple microservices stored as CodeProjects, group contain information for\ngit user authentication and repo url is stored for each project individually\n\n<a href=\"/code-scans\">Read more in code scan section</a>)\n\n\n#### SoftwarePacket\nSoftwarePacket entity represent two types of software. First is related with library installed on a particular asset. Information about a package\ncan be used later on searching for published vulnerabilities (for example via Vulners). Second type of object related with software packet is\nCodeGroup and CodeProject in this context it is a particular OpenSource packet (for java or javascript library) similar to first type it is also\nused for searching published vulnerabilities\n\n<a href=\"/opensource-scans\">Read more in OpenSource scan section</a>)\n\n#### Vulnerability\n\nEach of above object can have stored vulnerabilities. Vulnerabilities can be saved only via Automated security scans (for particular context).\nThere is no possibility to store vulnerability manually."},{"url":"/components/backend/","title":"Backend","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Backend","url":"/components/backend/"}],"content":"<a href=\"/Mixeway/MixewayBackend/blob/master/CHANGELOG.md\"><img src=\"https://camo.githubusercontent.com/452f81a1e660cf8f9a47db9405ce06a0f216221b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d6368616e67656c6f672d626c75652e737667\" alt=\"https://img.shields.io/badge/-changelog-blue.svg\" data-canonical-src=\"https://img.shields.io/badge/-changelog-blue.svg\" style=\"max-width:100%;\"></a>\n<a href=\"hub.docker.comd\"><img src=\"https://img.shields.io/docker/pulls/mixeway/backend?logo=Mixeway&style=plastic\" alt=\"https://img.shields.io/badge/-changelog-blue.svg\" data-canonical-src=\"https://img.shields.io/badge/-changelog-blue.svg\" style=\"max-width:100%;\"></a>\n[![Build Status](https://travis-ci.org/Mixeway/MixewayBackend.svg?branch=master)](https://travis-ci.org/Mixeway/MixewayBackend)\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayBackend&metric=alert_status)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayBackend)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=Mixeway_MixewayBackend&metric=security_rating)](https://sonarcloud.io/dashboard?id=Mixeway_MixewayBackend)\n\n# Mixeway Backend <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/deptrack.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/_/postgres\">DB - postgres database</a>\n- <a href=\"https://www.vaultproject.io/\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n###### Mixeway Backend Description:\nMixeway Backend is a spring boot application that serves REST API both for UserInterface and independent tools for scan creation and runs.\nBackend application also contains vulnerability scanner plugins definitions. Each plugin contains at least 3 operations: configure scan,\nrun scan and load vulnerabilities. This allows mixeway to be completely in charge of the scanning process which allows it to completely\nautomize the vulnerability assessment process.\n\nWith Hashicorp Vault integration passwords for each security scanner (which is the most sensitive component) is properly secured.\n\n<a href=\"https://mixeway.io\">High level informations can be found here</a>\n\n<a href=\"https://mixeway.github.io\">More detailed and technical docs are here</a>\n\n###### Hashicorp Vault integration:\nMixeway has to be able to reuse given passwords and api keys in order to use them with Vulnerability Scanning interactions.\n\n**Vault integration is optional but it is strongly recommended to be included - otherwise password for vulnerability scanners will\nbe stored in plaintext.**\n\n###### Mixeway User Interface Tech stack:\n<img src=\"https://mixeway.github.io/img/spring.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/postgres.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/vault.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/docker.png\" height=\"50px\">\n\n###### Requirements:\n- Running and working DB \n- JAVA 1.8\n- SSL Certificates\n\n###### Good to have:\n- Hashicorp Vault up and running\n\n###### Running in development mode:\n1. Make sure DB is up and running (You can use guide how to use postgres docker here https://hub.docker.com/_/postgres)\n2. Optionally make sure Vault is up and running (You can use guide how to use Vault docker here https://hub.docker.com/_/vault)\n3. Generate certificates and convert them to PKCS12 (yes certificates are required even in dev)\n\n```$xslt\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n```\n\n```$xslt\nopenssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12\n```\nCACERTS file is also needed, make sure You have known the location of it. <a href=\"https://stackoverflow.com/a/11937940/1394504\">It can be found using tips here</a> \n\nFinnaly run\n\n```\njava -jar --server.ssl.trust-store=/etc/pki/cacerts \\\n          --server.ssl.trust-store-password=changeit \\\n          --server.ssl.key-store=/etc/pki/localhost.p12 \\\n          --server.ssl.key-store-password=changeit \\\n          --server.ssl.keyAlias=localhost \\\n          --spring.profiles.active=dev \\\n          --spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/mixer \\\n          --spring.datasource.username=mixewayuser \\\n          --spring.datasource.password=mixewaypassword \\\n          --spring.cloud.vault.token=ffffffff-ffff-ffff-ffff-ffffffffffff \\\n          --spring.cloud.vault.scheme=http \\\n          --spring.cloud.vault.port=8200 \\\n          --spring.cloud.vault.host=MixerVault\n```\n REST API will be exposed on port `:8443`"},{"url":"/webapp-scans/","title":"Webapp Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Webapp Scans","url":"/webapp-scans/"}],"content":"### WebApplication Scanning Integrations\nUsing WebApplication Mixeway can automatically run scans basing on provided information \n(gathered by API or from network scan - from detected server wwww).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n\n\n\n### Info\nAt this moment only WebApplication scaner which is enabled is Acunetix. There is only two methods to authenticate scanning target: \nThrough header auth (injecting authentication header) or injecting cookie.\n\nAt this moment WebApps are not supporting Routing Domains (it either use proxy defined during scanner adding or not).\n\n### Discovery\nMixeway support 3 types of WebApp discovery\n* Manual through configuration->webapp->add: \n\n<img src=\"https://mixeway.github.io/img/newwebapp.gif\" height=\"400px\">\n\n\n* Automatic detection through Network scan plugin (each www server detected in network tests is added to the scope which is \nexecuted in scheduled manner)\n* REST API - more information details available in swagger\n\n### Integration goal\n* Configure scan \n* Run scan (scheduled, enabled manualy and REST API)\n* Load vulnerabilities\n\n### Recommended usage\nWebApp Scanning should be executed during smoke tests. This stage contains information about each target with information about\nauthorization."},{"url":"/network-scans/","title":"Network Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Network Scans","url":"/network-scans/"}],"content":"\n### Network Scanning integrations\nUsing network scanning integrations Mixeway can automatically run scans basing on provided information \n(gathered by API, IaaS plugin or entered manually).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/nexpose.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n\n<img src=\"https://mixeway.github.io/img/createassets.gif\">\n\n### Setup\nMixeway introduce something called Routing Domain assuming You may have more then one routing zone\nwithin Your organization, thus You will have at least one scanner of a particular type in Routing Domain\nto be able to scan all Your assets. Configuration of Routing Domains is described in <a href=\"/configuration\">\nConfiguration section</a>.\n\nNetwork scanners are add via Administration panel -> Scanners tab:\n<img src=\"https://mixeway.github.io/img/addscanner.png\" height=\"400px\">\n\n\n### Discovery\nMixeway support 3 types of asset discovery\n* Manual through configuration->infrastructure->add: <img src=\"https://mixeway.github.io/img/addasset.png\" height=\"250px\">\n* Automatic detection through IaaS plugin\n* REST API - more information details available in swagger\n\n### Integration goal\n* Configure scan \n* Run scan (scheduled, enabled manualy and REST API)\n* Load vulnerabilities\n\n### Recommended usage\nNetwork scan should be integrated on IaaS level. If IaaS  plugin is enabled Mixeway has knowledge about\nwhole infrastructure under development and can configure continuous vulnerability scanning without human interaction."},{"url":"/integrations/","title":"Integrations","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Integrations","url":"/integrations/"}],"content":"\n# Integrations\n\nMixeway is a software which is hub for security tools. It aims on integrating with tools security team use,\nand DevOps team use so the whole process of software development could be secured.\n\nLong story short it is all about integrations.\n\n### IaaS Integrations\nUsing IaaS integration Mixeway can download information about particular project with data like: IP addresses,\nhostnames, security group rules and more. Those data are being use to enable continuously scan whole infrastructure\nwithout even touching vulnerability scanner.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/openstack.png\" height=\"50px\">\n\n**_Planned for the future release:_**\n\n<img src=\"https://mixeway.github.io/img/aws.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/gcp.jpg\" height=\"50px\">\n\n\n### Network Scanning integrations\nUsing network scanning integrations Mixeway can automatically run scans basing on provided information \n(gathered by API, IaaS plugin or entered manually).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/nexpose.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n\n\n\n### WebApplication Scanning Integrations\nUsing WebApplication Mixeway can automatically run scans basing on provided information \n(gathered by API or from network scan - from detected server wwww).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n\n\n\n### Source Code Security Audit:\nUsing Source Code Security Audit Mixeway can automatically run manage SAST scans by the API and jenins plugin.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n\n**_Planned for the future release:_**\n\n<img src=\"https://mixeway.github.io/img/checkmarx.png\" height=\"50px\">\n\n\n\n### OpenSource Audits:\nUsing OpenSource plugins Mixeway can download results from OpenSource scans which is crucial source of information \nfor security quality gateway.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n\n\n\n### CIS Compliance\nMixeway can also download results of CIS Compliance benchmark. <img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n\n\n**_Avaliable integrations:_**\n- Kubernetes benchmark\n- Docker benchmark\n\n\n### Other integrations\nMixeway integrates with BugTracking systems in order to automatically provide information about found\nvulnerabilities and CICD to properly introduce security quality gateway\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">"},{"url":"/getting-started/","title":"Getting Started","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Getting Started","url":"/getting-started/"}],"content":"\n# Gettings started with Mixeway\n\nInstallation of Mixeway is pretty straight forward. All you need is OpenSSL (or valid SSL Certificates)\nand docker-compose command, then clone repo\n* Clone Repo\n\n```\ngit clone https://github.com/Mixeway/MixewayHub\n```\n\n* initialize variables (prepare certificates). You can run this step manually by putting SSL certificates in pki directory\n\n```\ncd MixewayHub\n./setup.sh\n``` \n\nThis operation will create certificates keys and key stores under `pki` directory and then just set `environment`\nvariables which are being set at dockers.\n* Make sure Vault and DB are up and running. \n* Pull and run docker-compose\n\n```\ndocker-compose pull\ndocker-compose up -d\n```\n\nwhich will run the Mixeway in background.\n* Finally, use Your browser to navigate to\n\n```\nhttps://<Your-IP-Goes-here>\n```\n\n<img src=\"https://mixeway.github.io/img/createproject.gif\">"},{"url":"/routing-domains/","title":"Routing Domains","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Routing Domains","url":"/routing-domains/"}],"content":"\n## Conncept\nHaving in mind that many organization have multiple network zones and possibly no routing between them we have introduced concept of \nRouting Domains. Following this fact, in order to be able to properly prepare vulnerability scanning, You have to have installed multiple \nvulnerability scanners (per network zone). Routing Domains help to identify which vulnerability scanner should be used in order to\nrun test of particular object.\n\n\n### Example\nYou have 3 network zones: `A`, `B` and `C` where are installed three network vulnerability scanners. If project which has configured automatic scans\nwill contains Assets in all three zones, scan will be configured automatically on each vulnerability scanner.\n\n\n### Management\nRouting domains are completely managed by user. In administration panel administrator has possibility to delete and create new Routing Domains."},{"url":"/opensource-scans/","title":"Opensource Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Opensource Scans","url":"/opensource-scans/"}],"content":"\n\n### OpenSource Audits:\nUsing OpenSource plugins Mixeway can download results from OpenSource scans which is crucial source of information \nfor security quality gateway.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n\n\n\nOWASP Dependency Trak Integration will be introduced in next update.\n\n<img src=\"https://mixeway.github.io/img/deptrack.png\" height=\"50px\">\n\n\n### Discovery\nIn case of OpenSource scanning Mixeway is sharing REST API which is meant to download results of an audit.\n\n### Integration goal\n* Get Report\n\n### Recommended usage\nOpenSource scanning should be done right before merge or pull request along with source code security audit. Merge/Pull should be \ndone based on the results from the test.  \n\nCheck Security Quality Gateway part where information about integration is put."},{"url":"/code-scans/","title":"Code Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Code Scans","url":"/code-scans/"}],"content":"\n\n### Source Code Security Audit:\nUsing Source Code Security Audit Mixeway can automatically run manage SAST scans by the API and jenins plugin.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://www.checkmarx.com/wp-content/uploads/2019/10/Checkmarx-logo-2019-horizontal-4.png\" height=\"50px\">\n\n\n\n### Info\nCode Scanning is built from 2 objects - CodeGroup which may or may not contain child applications (CodeProjects). It is designed so one product\nwhich is build from multiple microservices could be still logically linked.\n\n<img src=\"https://mixeway.github.io/img/newcode.gif\">\n\n\n\n### Discovery\nIn order to use Code Scan plugin each CodeGroup has to be previously configured - Configuration->Source Code -> Add Code Group. \nFields like GIT repo and git username and password are obligatory to run the scan.\n\n\n### Integration goal\n* Configure scan - in scope of Microfocus Fortify it require additional software - use troubleshooting and contact us for the details\n* Run scan (scheduled, enabled manualy and REST API) - in scope of Microfocus Fortify it require additional software - use troubleshooting and contact us for the details\n* Load vulnerabilities\n\n### Recommended usage\nIdeal place to run Source Code Security Audit is before merge request (or pull request) is being done. Merge decision should be based on\nresults of a test\n\n### API usage:\n\n- Scan Execution\n\n```shell script\ncurl -X PUT \\\n    -H 'apiKey: {apiKey}' \\\n    https://localhost/api/sast/{projectId}/create/{groupName}/{projectName}\nResponse:\nHTTP 201\n{\"status\":\"OK|Qeueed\",\"requestId\":\"ffffffff-ffff-ffff-fffffffffff\"}\n```\n\n- Scan progres check\n\n```shell script\ncurl -X GET \\\n    -H 'apiKey: {apiKey}' \\\n    https://localhost/api/vulns/{projectId}/{codeGroup}/{codeProject}\nResponse:\nHTTP 200\n{\"commitId\":\"iuahsidh71d21dwa\",\"result\":\"Ok|Not Ok\", \"running:\":true, \"inQueue\":false, \"vulnManageResponseList\":[]}\n```\nWhere:\n    - Project has to be created (projectId avaliable)\n    - CodeGroup and CodeProject has to be created (groupName and projectName ) in the most scenarios groupName=projectName\n    - ApiKey is generated"},{"url":"/security-quality-gateway/","title":"Security Quality Gateway","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Security Quality Gateway","url":"/security-quality-gateway/"}],"content":"# Security Quality gateway\n\n<img src=\"https://mixeway.github.io/img/cicd2.png\" height=\"400px\">\n\n\nSecurity Quality gateway is element which is meant to provide informations about actual state of Security of given scope.\n\nGateway is returning information about Code, OpenSource and WebApp Vulnerabilities of given resources if any.\n\nResults of a gateway maybe configured in Administration panel. Algorithm to count the value is always the same but value when \nresult is failing may be customized.\n\n###Accessing\nSequrity Quality gateway may be accessed via:\n* REST API - more details in swagger\n* Jenkins plugin which will be introduced later on\n\n### CI integrations\nMixeway has prepared automated script which is easy to implement in any CICD pipeline which can run bash scripts.\nRequirements:\n1. installed jq, curl\n2. For using OpenSource (At this moment only DependencyTrack available ) scan possibility to run CycloneDX plugin which is dependant on project language - more details here\nhttps://cyclonedx.org\n\n#### Setup\n\n```\ncd {project}\ncurl https://raw.githubusercontent.com/Mixeway/MixewayHub/master/scripts/CIScripts/mixeway-ci > mixeway-ci\nchmod +x mixeway-ci\n```\n\nYou have to obtain information like projectId, and projectApiKey. They can be found using GUI or REST API.\n\n#### Usage\n\n```\nmixeway-ci --appname=projectName \\\n    --groupname=groupName \\\n    --mixewayurl=http://mixeway.io \\\n    --mixewayapikey=123 \\\n    --mixewayprojectid=1 \\\n    --skipsast \\\n    --skipopensource\n\nRequired:\n    --appname - Subject application name\n    --groupname - Fortify SCA build name\n    --mixewayurl - URL for Mixeway API\n    --mixewayapikey - API key generated on Mixeway to authenticate call\n    --mixewayprojectid - ID of project on Mixeway\nOptional:\n    --skipsast - setup when You dont want run SAST test\n    --skipopensource - setup when You dont want run OpenSource test\n```\n\nPlease note that enabling both `--skipsast` and `--skipopensource` will only verify state of security.\n\nTimeout for script is 5min. If timeout is exceeded script return success."},{"url":"/troubleshooting/","title":"Troubleshooting","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Troubleshooting","url":"/troubleshooting/"}],"content":"#Troubleshooting\n\nAre you having problems with Mixeway? Did you find a strange bug? \nThink of an amazing feature that would make your life better? \nIt is currently maintained by the good folks over at GitHub, \nso feel free to reach out to us or open an issue in the <a href=\"https://github.com/Mixeway/MixewayHub/issues\">GitHub Repo</a>."},{"url":"/cis-compliance/","title":"Cis Compliance","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Cis Compliance","url":"/cis-compliance/"}],"content":"\n\n# CIS Compliance Check"},{"url":"/other/","title":"Other","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Other","url":"/other/"}],"content":"# Other\n\nMixeway provide intgration with more solutions which are not Vulnerability Scanners. Those integrations are helping to fit even better\nin CI/CD pipeline\n\n## BugTrackers\n- JIRA - this integration allows to configure automatic or manual issue creation to the given scope (You can have multiple JIRA instances configured\nfor single project - each can be configured and linked with particular vulnerability type as teams which maintain those could be different).\n\n## CI/CD\nAt this moment none CI/CD tool plugin is ready to be published. Jenkins plugin is under development"}]
