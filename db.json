[{"url":"/","title":"Mixeway Docs","breadcrumbs":[{"title":"Mixeway Docs","url":"/"}],"content":"\n\n# Mixeway Hub <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n# Mixeway goal\nMixeway is designed for security teams. \n\nAre You using Vulnerability Scanners within Your organization but You have problem in fitting them into\nCICD software delivery pipeline? Mixeway might me an ideal solution for You.\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n<img src=\"https://mixeway.github.io/img/arch.png\">\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n\n### Requirements:\n- Docker-compose\n\n\n### Running Mixeway:\nThere are 2 requirements for Mixeway to be successfully deployed using prepared docker-compose.\n- environments file to be properly configured:\n\n```\nTRUSTPASS=changeit\nKEYALIAS=localhost\nP12PASS=changeit\nPROFILE=prod\n```\n\nWhere TRUSTPASS is password for CACERT file (java keystore containing trusted root certificates), KEYALIAS alias for key stored within PKCS12 file and P12PASS - password for PKCS12 file containing both certificate and private key.\n- Certificates are in the proper place. There should be `pki` directory in the folder where docker-compose.yml is located. It is important that the `pki` directory will contain files:\n  - `ca.pem` which contains trusted root certificates (in pem format for nginx)\n  - `cert.crt` which contains public key in pem format\n  - `private.key` which contains private key in pem format\n  - `certificate.p12` PKCS12 file of cert.crt and private.key\n  - `trust.jks` which could be cacerts of JVM \n  \nThere is `setup` script prepared for `Unix` machines which generate certificates and prepare `environments`\n\nUsage:\n```\ngit clone https://github.com/Mixeway/MixewayHub\n/bin/sh startup.sh\ndocker-compose pull\ndocker-compose up\n```\n\nYou can either use `setup` script or prepare environment on Your own using the guide above.\n\nMixeway will be available at https://__Your_IP_goes_here"},{"url":"/components/vault/","title":"Vault","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Vault","url":"/components/vault/"}],"content":"# Mixeway Vault <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n### About\nMixeway use HashiCorp Vault as secure storage. Passwords are hashed using `BCrypt` but software needs actual\npassword in order to log into scanner. We have decided to not store it in plain text but use Vault instead.\n\n\n### Known problems\nAt this moment vault image which is configured inside MixewayVault docker image is hardened and initialized.\nThere is init script which do unseal operation and root token is hardcoded within Backend Application.\nWe consider it a hube problem and we are trying to make it works securely.\n\n### Use Your own vault - to be announced in upcoming version"},{"url":"/components/frontend/","title":"Frontend","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Frontend","url":"/components/frontend/"}],"content":"# Mixeway User Interface <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n###### Mixeway User Interface Description:\nMixeway User Interface is simple Angular 8 application based on <a href=\"https://github.com/akveo/ngx-admin\">Ngx-admin template</a>.\nHigh level description can be found at <a href=\"https://mixeway.io\">mixeway.io</a>\n\n\n###### Mixeway User Interface Tech stack:\n<img src=\"https://akveo.github.io/nebular/assets/img/akveo-logo.png\" width=\"50px\">\n<img src=\"https://mixeway.github.io/img/angular-icon.svg\" width=\"50px\">\n<img src=\"https://mixeway.github.io/img/docker.png\" width=\"50px\">\n\n###### Requirements:\n- Running and working backend API - <a href=\"https:/github.com/Mixeway/MixewayBackend\">Mixeway REST API</a>\n- NPM 6.9+\n- Optionaly: ssl certificates\n- Proxy setup\n\n###### Running in development mode:\n```\nng serve \"--proxy-config=proxy.conf.json\" \"--configuration=dev\" \"--ssl\" \"--ssl-cert=/etc/pki/cert.pem\" \"--ssl-key=/etc/pki/key2.pem\"\n```"},{"url":"/getting-started/","title":"Getting Started","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Getting Started","url":"/getting-started/"}],"content":"\n# Gettings started with Mixeway\n\nInstallation of Mixeway is pretty straight forward. All you need is OpenSSL (or valid SSL Certificates)\nand docker-compose command, then clone repo\n```bash\ngit clone https://github.com/Mixeway/MixewayHub\n```\ninitialize variables \n```bash\ncd MixewayHub\n./setup.sh\n``` \nThis operation will create certificates keys and key stores under `pki` directory and then just set `environment`\nvariables which are being set at dockers. Next,\n```bash\ndocker-compose pull\ndocker-compose up -d\n```\nwhich will run the Mixeway in background.\n\nFinally, use Your browser to navigate to\n```bash\nhttps://<Your-IP-Goes-here>\n```"},{"url":"/integrations/","title":"Integrations","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Integrations","url":"/integrations/"}],"content":"\n# Integrations\n\nMixeway is a software which is hub for security tools. It aims on integrating with tools security team use,\nand DevOps team use so the whole process of software development could be secured.\n\nLong story short it is all about integrations.\n\n### IaaS Integrations\nUsing IaaS integration Mixeway can download information about particular project with data like: IP addresses,\nhostnames, security group rules and more. Those data are being use to enable continuously scan whole infrastructure\nwithout even touching vulnerability scanner.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/openstack.png\" height=\"50px\">\n\n**_Planned for the future release:_**\n\n<img src=\"https://mixeway.github.io/img/aws.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/gcp.jpg\" height=\"50px\">\n\n\n### Network Scanning integrations\nUsing network scanning integrations Mixeway can automatically run scans basing on provided information \n(gathered by API, IaaS plugin or entered manually).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/nexpose.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n\n\n\n### WebApplication Scanning Integrations\nUsing WebApplication Mixeway can automatically run scans basing on provided information \n(gathered by API or from network scan - from detected server wwww).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n\n\n\n### Source Code Security Audit:\nUsing Source Code Security Audit Mixeway can automatically run manage SAST scans by the API and jenins plugin.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n\n**_Planned for the future release:_**\n\n<img src=\"https://mixeway.github.io/img/checkmarx.png\" height=\"50px\">\n\n\n\n### OpenSource Audits:\nUsing OpenSource plugins Mixeway can download results from OpenSource scans which is crucial source of information \nfor security quality gateway.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n\n\n\n### CIS Compliance\nMixeway can also download results of CIS Compliance benchmark. <img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n\n\n**_Avaliable integrations:_**\n- Kubernetes benchmark\n- Docker benchmark\n\n\n### Other integrations\nMixeway integrates with BugTracking systems in order to automatically provide information about found\nvulnerabilities and CICD to properly introduce security quality gateway\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">"},{"url":"/network-scans/","title":"Network Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Network Scans","url":"/network-scans/"}],"content":"\n### Network Scanning integrations\nUsing network scanning integrations Mixeway can automatically run scans basing on provided information \n(gathered by API, IaaS plugin or entered manually).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/nexpose.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n\n### Setup\nMixeway introduce something called Routing Domain assuming You may have more then one routing zone\nwithin Your organization, thus You will have at least one scanner of a particular type in Routing Domain\nto be able to scan all Your assets. Configuration of Routing Domains is described in <a href=\"/configuration\">\nConfiguration section</a>.\n\nNetwork scanners are add via Administration panel -> Scanners tab:\n<img src=\"https://mixeway.github.io/img/addscanner.png\" height=\"400px\">\n\n\n### Discovery\nMixeway support 3 types of asset discovery\n* Manual through configuration->infrastructure->add: <img src=\"https://mixeway.github.io/img/addasset.png\" height=\"250px\">\n* Automatic detection through IaaS plugin\n* REST API - more information details available in swagger\n\n### Integration goal\n* Configure scan \n* Run scan (scheduled, enabled manualy and REST API)\n* Load vulnerabilities\n\n### Recommended usage\nNetwork scan should be integrated on IaaS level. If IaaS  plugin is enabled Mixeway has knowledge about\nwhole infrastructure under development and can configure continuous vulnerability scanning without human interaction."},{"url":"/webapp-scans/","title":"Webapp Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Webapp Scans","url":"/webapp-scans/"}],"content":"### WebApplication Scanning Integrations\nUsing WebApplication Mixeway can automatically run scans basing on provided information \n(gathered by API or from network scan - from detected server wwww).\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n\n\n### Info\nAt this moment only WebApplication scaner which is enabled is Acunetix. There is only two methods to authenticate scanning target: \nThrough header auth (injecting authentication header) or injecting cookie.\n\nAt this moment WebApps are not supporting Routing Domains (it either use proxy defined during scanner adding or not).\n\n### Discovery\nMixeway support 3 types of WebApp discovery\n* Manual through configuration->webapp->add: <img src=\"https://mixeway.github.io/img/addwebapp.png\" height=\"250px\">\n* Automatic detection through Network scan plugin (each www server detected in network tests is added to the scope which is \nexecuted in scheduled manner)\n* REST API - more information details available in swagger\n\n### Integration goal\n* Configure scan \n* Run scan (scheduled, enabled manualy and REST API)\n* Load vulnerabilities\n\n### Recommended usage\nWebApp Scanning should be executed during smoke tests. This stage contains information about each target with information about\nauthorization."},{"url":"/components/db/","title":"Db","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Db","url":"/components/db/"}],"content":"# Mixeway DB <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n## Migrations\nMixeway use Liquibase for DB synchronization. Each time database scheme change in any upcoming version\nit will be backward compatible.\n\n## Use Your own Database Server - will be intordduced in upcoming versions"},{"url":"/security-quality-gateway/","title":"Security Quality Gateway","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Security Quality Gateway","url":"/security-quality-gateway/"}],"content":"# Security Quality gateway\n\n<img src=\"https://mixeway.github.io/img/cicd2.png\" height=\"400px\">\n\n\nSecurity Quality gateway is element which is meant to provide informations about actual state of Security of given scope.\n\nGateway is returning information about Code, OpenSource and WebApp Vulnerabilities of given resources if any.\n\nResults of a gateway maybe configured in Administration panel. Algorithm to count the value is always the same but value when \nresult is failing may be customized.\n\n###Accessing\nSequrity Quality gateway may be accessed via:\n* REST API - more details in swagger\n* Jenkins plugin which will be introduced later on"},{"url":"/cis-compliance/","title":"Cis Compliance","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Cis Compliance","url":"/cis-compliance/"}],"content":"\n\n# CIS Compliance Check"},{"url":"/opensource-scans/","title":"Opensource Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Opensource Scans","url":"/opensource-scans/"}],"content":"\n\n### OpenSource Audits:\nUsing OpenSource plugins Mixeway can download results from OpenSource scans which is crucial source of information \nfor security quality gateway.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n\n### Discovery\nIn case of OpenSource scanning Mixeway is sharing REST API which is meant to download results of an audit.\n\n### Integration goal\n* Get Report\n\n### Recommended usage\nOpenSource scanning should be done right before merge or pull request along with source code security audit. Merge/Pull should be \ndone based on the results from the test."},{"url":"/code-scans/","title":"Code Scans","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Code Scans","url":"/code-scans/"}],"content":"\n\n### Source Code Security Audit:\nUsing Source Code Security Audit Mixeway can automatically run manage SAST scans by the API and jenins plugin.\n\n**_Avaliable integrations:_**\n\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n\n**_Planned for the future release:_**\n\n<img src=\"https://mixeway.github.io/img/checkmarx.png\" height=\"50px\">\n\n### Info\nCode Scanning is built from 2 objects - CodeGroup which may or may not contain child applications (CodeProjects). It is designed so one product\nwhich is build from multiple microservices could be still logically linked.\n\n\n### Discovery\nIn order to use Code Scan plugin each CodeGroup has to be previously configured - Configuration->Source Code -> Add Code Group. \nFields like GIT repo and git username and password are obligatory to run the scan.\n\n\n### Integration goal\n* Configure scan - in scope of Microfocus Fortify it require additional software - use troubleshooting and contact us for the details\n* Run scan (scheduled, enabled manualy and REST API) - in scope of Microfocus Fortify it require additional software - use troubleshooting and contact us for the details\n* Load vulnerabilities\n\n### Recommended usage\nIdeal place to run Source Code Security Audit is before merge request (or pull request) is being done. Merge decision should be based on\nresults of a test"},{"url":"/other/","title":"Other","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Other","url":"/other/"}],"content":""},{"url":"/components/backend/","title":"Backend","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Components"},{"title":"Backend","url":"/components/backend/"}],"content":"# Mixeway Backend <img src=\"https://mixeway.github.io/img/logo_dashboard.png\" height=\"60px\">\n\n### Disclaimer:\n> The current version of Mixaway (0.9) is considered as beta. It contains several bugs and vulnerabilities. Every fix\nis put on the board and proceed to make sure version 1.0 will be vulnerability and bug-free. \n\n\n### About Mixeway:\nMixeway is an OpenSource software that is meant to simplify the process of security assurance of projects which are implemented using CICD procedures. **Mixawey is not another vulnerability scanning\nsoftware - it is security orchestration tool**.\n\nWith number of plugins for Vulnerability Scanners :\n<img src=\"https://mixeway.github.io/img/nessus.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/openvas.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/acunetix.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/fortify.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/depcheck.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/cis.png\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jenkins.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/jira.jpg\" height=\"50px\">\n\nWith all this available, Mixeway provides functionalities to:\n- Automatic service discovery (IaaS Plugin for assets and network scans for services)\n- Automatic Vulnerability Scan Configuration (Based on most recent configuration) - hands-free!\n- Automatic and on-demand Vulnerability scan execution (based on policy and executed via a REST API call)\n- One Vulnerability Database for all type of sources - SAST, DAST, OpenSource and Infrastructure vulnerabilities in one place\n- Customizable Security Quality Gateway - a reliable piece of information for CICD to decide if a job should pass or not.\n- REST API enables integration with already used Vulnerability Management systems used within the organization.\n\nElements of a system:\n- <a href=\"https://github.com/Mixeway/MixewayBackend\">Backend - Spring Boot REST API</a>\n- <a href=\"https://github.com/Mixeway/MixewayFrontend\">Frontend - Angular 8 application </a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">DB - postgres database</a>\n- <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">Vault - password store</a>\n- <a href=\"https://github.com/Mixeway/MixewayHub\">MixewayHub - parent project which contain docker-compose and one click instalation </a>\n\n###### Mixeway Backend Description:\nMixeway Backend is a spring boot application that serves REST API both for UserInterface and independent tools for scan creation and runs.\nBackend application also contains vulnerability scanner plugins definitions. Each plugin contains at least 3 operations: configure scan,\nrun scan and load vulnerabilities. This allows mixeway to be completely in charge of the scanning process which allows it to completely\nautomize the vulnerability assessment process.\n\nWith Hashicorp Vault integration passwords for each security scanner (which is the most sensitive component) is properly secured.\n\n<a href=\"https://mixeway.io\">High level informations can be found here</a>\n\n<a href=\"https://mixeway.github.io\">More detailed and technical docs are here</a>\n\n###### Mixeway User Interface Tech stack:\n<img src=\"https://mixeway.github.io/img/spring.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/postgres.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/vault.jpg\" height=\"50px\">\n<img src=\"https://mixeway.github.io/img/docker.png\" height=\"50px\">\n\n###### Requirements:\n- Running and working DB - <a href=\"https://hub.docker.com/repository/docker/mixeway/db\">docker image</a>\n- Running and working Vault - <a href=\"https://hub.docker.com/repository/docker/mixeway/vault\">docker image</a>\n- Docker-compose\n- JAVA 1.8\n- SSL Certificates\n\n###### Running in development mode:\nMake sure that docker is binding properly docker names to a network interface, to make sure put hosts file as follows\n```bash\n127.0.0.1 MixerDB MixerVault\n```\nRun DB and Vault dockers. You can do that using docker-compose prepared for development purposes\n```bash\ndocker-compose -f docker-compose-db-vault.yml up -d\n```\nMake Sure to generate certificates. You need private key and certificate\n```bash\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n```\nPKCS12 is needed to run backend:\n```bash\nopenssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12\n```\nCACERTS file is also needed, make sure You have known the location of it. <a href=\"https://stackoverflow.com/a/11937940/1394504\">It can be found using tips here</a> \n\nFinnaly run\n```\njava -jar --server.ssl.trust-store=/etc/pki/cacerts \\\n          --server.ssl.trust-store-password=changeit \\\n          --server.ssl.key-store=/etc/pki/localhost.p12 \\\n          --server.ssl.key-store-password=changeit \\\n          --server.ssl.keyAlias=localhost \\\n          --spring.profiles.active=dev```"},{"url":"/troubleshooting/","title":"Troubleshooting","breadcrumbs":[{"title":"Mixeway Docs","url":"/"},{"title":"Troubleshooting","url":"/troubleshooting/"}],"content":"#Troubleshooting\n\nAre you having problems with Mixeway? Did you find a strange bug? \nThink of an amazing feature that would make your life better? \nIt is currently maintained by the good folks over at GitHub, \nso feel free to reach out to us or open an issue in the <a href=\"https://github.com/Mixeway/MixewayHub/issues\">GitHub Repo</a>."}]
